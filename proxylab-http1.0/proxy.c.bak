#include <stdio.h>
#include "csapp.h"

/* Debug mode or not */
#define DEBUG

#ifdef DEBUG
    #define dbg_printf(...) printf(__VA_ARGS__)
#else
    #define dbg_printf(...)
#endif

/* Recommended max cache and object sizes */
#define MAX_CACHE_SIZE 1049000
#define MAX_OBJECT_SIZE 102400
// #define MAX_OBJECT_SIZE 1024000

/* Function macros */
#define FORWARD_HDR(str) (!strstr(str, "Host:")&& !strstr(str,"User-Agent:")&&\
    !strstr(str, "Connection:")&& !strstr(str, "Proxy-Connection:"))

/* You won't lose style points for including this long line in your code */
static const char *user_agent_hdr = "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n";

void doit(int fd);
void read_requesthdrs(rio_t *rp, char* original_hdr);
void parse_uri(char* uri, char* hostname, char* port, char* filename);
void serve_static(int fd, char* filename, int filesize);
void get_filetype(char* filename, char* errnum);
void serve_dynamic(int fd, char* filename, char* cgiargs);
void clienterror(int fd, char* cause, char* errnum,
                char* shortmsg, char* longmsg);
void make_proxy_request(char* request, char* request_line, 
                char* hostname, char* port, char* original_hdr);
void forward_request(int fd, char* request);
void forward_response(int serverfd, int clientfd);

int main(int argc, char** argv)
{
    int listenfd, connfd;
    char hostname[MAXLINE], port[MAXLINE];
    socklen_t client_len;
    struct sockaddr_storage client_addr;
    if(argc != 2){
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    listenfd = Open_listenfd(argv[1]);
    dbg_printf("listenfd = %d ready\n", listenfd);
    while(1){
        client_len = sizeof(client_addr);
        connfd = Accept(listenfd, (SA*)&client_addr, 
            &client_len); //connect client
        Getnameinfo((SA*)&client_addr, client_len, hostname, MAXLINE, port,
            MAXLINE, 0); //get hostname from client_addr and write to hostname
        printf("Proxy accepted connection from (%s, %s)\n", hostname, port);
        doit(connfd);
        Close(connfd);
    }
    dbg_printf("Proxy returns...\n");
    return 0;
}

/*
 * parse_uri - parse URI into filename and CGI args
 *      What does request look like?
 *      What I do is to forward the original request to server, so I have to
 *          complete the request.
 */
/* $begin parse_uri */
void parse_uri(char* uri, char* hostname, char* port, char* filename)
{
    dbg_printf("***in parse_uri***\n");

    char *host_begin, *port_begin, *host_end;

    host_begin = strstr(uri, "://");    // uri in format "http://..."
    host_begin = (host_begin == NULL) ? uri : 
        host_begin + strlen("://"); 

    port_begin = index(host_begin, ':');

    host_end = index(host_begin, '/');  // uri in format "http://.../"
    host_end = (host_end == NULL) ? uri + strlen(uri) : host_end;

    port_begin = (port_begin == NULL) ? host_end + 1 : 
        port_begin + 1;  // uri in format "http://...:.../"

    strncpy(hostname, host_begin, port_begin - host_begin - 1);//parse hostname
    dbg_printf("hostname: %s\n", hostname);

    if(host_end - port_begin > 0)
        strncpy(port, port_begin, host_end - port_begin);
    else
        strcpy(port, "80");
    dbg_printf("port: %s\n", port);

    strcpy(filename, host_end);
    if(!strcmp(filename, "")){
        strcat(filename, "/");
    }
    dbg_printf("filename: %s\n", filename);
}
/* $end parse_uri */

/*
 * clienterror - returns an error message to the client
 */
/* $begin clienterror */
void clienterror(int fd, char *cause, char *errnum, 
		 char *shortmsg, char *longmsg) 
{
    char buf[MAXLINE], body[MAXBUF];

    /* Build the HTTP response body */
    sprintf(body, "<html><title>Tiny Error</title>");
    sprintf(body, "%s<body bgcolor=""ffffff"">\r\n", body);
    sprintf(body, "%s%s: %s\r\n", body, errnum, shortmsg);
    sprintf(body, "%s<p>%s: %s\r\n", body, longmsg, cause);
    sprintf(body, "%s<hr><em>The JOJO Proxy</em>\r\n", body);

    /* Print the HTTP response */
    sprintf(buf, "HTTP/1.0 %s %s\r\n", errnum, shortmsg);
    Rio_writen(fd, buf, strlen(buf));
    sprintf(buf, "Content-type: text/html\r\n");
    Rio_writen(fd, buf, strlen(buf));
    sprintf(buf, "Content-length: %d\r\n\r\n", (int)strlen(body));
    Rio_writen(fd, buf, strlen(buf));
    Rio_writen(fd, body, strlen(body));
}
/* $end clienterror */

/*
 * read_requesthdrs - read HTTP request headers, and can just ignore them
 */
/* $begin read_requesthdrs */
void read_requesthdrs(rio_t *rp, char* original_hdr) 
{
    dbg_printf("***in read_requesthdrs***\n");

    char buf[MAXLINE];

    memset(original_hdr, 0, MAXLINE);
    Rio_readlineb(rp, buf, MAXLINE);
    printf("%s", buf);
    if(FORWARD_HDR(buf)){
        strcat(original_hdr, buf);
    }
    while(strcmp(buf, "\r\n")) {
        Rio_readlineb(rp, buf, MAXLINE);
        if(FORWARD_HDR(buf)){
            strcat(original_hdr, buf);
        }   
        printf("%s", buf);
    }
    return;
}
/* $end read_requesthdrs */

/**
 * make_proxy_request - form a HTTP request and HTTP header
 */
/* $begin make_proxy_request */
void make_proxy_request(char* request, char* request_line, 
    char* hostname, char* port, char* original_hdr)
{
    dbg_printf("***in make_proxy_request***\n");
    /* Initiate request */
    strcpy(request, "");
    /* Make HTTP request line */
    strcpy(request, "GET ");
    strcat(request, request_line);
    strcat(request, " HTTP/1.0\r\n");
    /* Make HTTP request header */
    strcat(request, "Host: ");
    strcat(request, hostname);
    strcat(request, "\r\n");
    strcat(request, user_agent_hdr);
    strcat(request, "Connection: close\r\nProxy-Connection: close\r\n");
    strcat(request, original_hdr);
    strcat(request, "\r\n");
    dbg_printf("%s", request);
}
/* $end make_proxy_request */

/**
 * forward_request - forward request from local client
 *      but remember to change HTTP header
 */
/* $begin forward_request */
void forward_request(int fd, char* request){
    dbg_printf("***in forward_request***\n");
    Rio_writen(fd, request, strlen(request));
    dbg_printf("Request sended ok!\n");
}
/* $end forward_request */

/**
 * forward_response - read and forward response from server to local client
 *      need to cache
 */
/* $begin forward_response */
void forward_response(int serverfd, int clientfd){
    dbg_printf("***in forward_response***\n");
    rio_t rio;
    int filesize;
    char receive[MAXLINE] = {0}, buf[MAXLINE] = {0}, 
        file[MAX_OBJECT_SIZE] = {0};
    char *size_begin, *size_end;

    /* Get response from server */
    Rio_readinitb(&rio, serverfd);
    Rio_readlineb(&rio, receive, MAXLINE);
    printf("%s", receive);
    while(strcmp(receive, "\r\n")){
        Rio_readlineb(&rio, receive, MAXLINE);
        printf("%s", receive);
        if((size_begin = strstr(receive, "Content-length: ")) != NULL){
            size_begin += strlen("Content-length: ");
            if((size_end = strstr(size_begin, "\r\n")) != NULL){
                strncpy(buf, size_begin, size_end - size_begin);
                dbg_printf("buf = %s\n", buf);
                filesize = atoi(buf);
                dbg_printf("filesize = %d\n", filesize);
            }
        }
    }
    Rio_readnb(&rio, file, filesize);
    dbg_printf("-----BEGIN FILE-----\n%s-----END FILE-----\n", file);

    /* Send response to client */
    dbg_printf("Writing file to client...\n");
    Rio_writen(clientfd, receive, strlen(receive));
    Rio_writen(clientfd, file, filesize);
    return;
}
/* $end forward_response */

/*
 * doit - handle one HTTP request/response transaction
 *      connect server and forward request to server;
 *      forward response to client
 */
/* $begin doit */
void doit(int fd) 
{
    char buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];
    char filename[MAXLINE] = {0}, hostname[MAXLINE] = {0}, port[MAXLINE] = {0};
    char original_hdr[MAXLINE], proxy_request[MAXLINE];
    int proxyfd;
    rio_t rio;

    /* Read request line and headers */
    Rio_readinitb(&rio, fd);
    if (!Rio_readlineb(&rio, buf, MAXLINE))
        return;
    printf("%s", buf);
    sscanf(buf, "%s %s %s", method, uri, version);
    if (strcasecmp(method, "GET")) {
        clienterror(fd, method, "501", "Not Implemented",
                    "JOJO Proxy does not implement this method");
        return;
    }
    read_requesthdrs(&rio, original_hdr);

    /* Parse URI from GET request */
    parse_uri(uri, hostname, port, filename);

    /* Make proxy request */
    make_proxy_request(proxy_request, filename, hostname, port, original_hdr);

    /* Connect Web server and forward request */
    if((proxyfd = open_clientfd(hostname, port)) < 0){
        dbg_printf("trying to connect to server...\nconnect failed\n");
        return;
    }
    dbg_printf("\nConnect successful! proxyfd = %d\n", proxyfd);

    /* Forward request from client to server */
    forward_request(proxyfd, proxy_request);

    /* Forward response from server to client */
    forward_response(proxyfd, fd);
}
/* $end doit */